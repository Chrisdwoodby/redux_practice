{"ast":null,"code":"import { createStore, combineReducers } from \"redux\";\n\nconst addNewMessageActionCreator = ({\n  userName,\n  text\n}) => ({\n  type: \"ADD_MESSAGE\",\n  payload: {\n    userName,\n    text\n  }\n});\n\nconst addUserActionCreator = ({\n  userName\n}) => ({\n  //complete this action creator\n  type: \"ADD_USER\",\n  payload: {\n    userName\n  }\n});\n\nconst defaultAppState = {\n  userName: \"\",\n  text: \"\"\n};\n\nconst messagesReducer = function (previousState = defaultAppState, action) {\n  // console.log(\">>> ACTION OF Type >>> new message \" + action.type);\n  // console.log(\">>> ACTION's PAYLOAD IS >>> new message \", action.payload);\n  switch (action.type) {\n    case \"ADD_MESSAGE\":\n      return {\n        userName: action.payload.userName,\n        text: action.payload.text\n      };\n\n    default:\n      return previousState;\n  }\n};\n\nconst usersReducer = function (previousState = {\n  userList: []\n}, action) {\n  console.log(\">>> ACTION OF Type >>> user \" + action.type);\n  console.log(\">>> ACTION's PAYLOAD IS >>> user \", action.payload);\n\n  switch (action.type) {\n    case \"ADD_USER\":\n      return {\n        userList: [...previousState.userList, action.payload]\n      };\n\n    /* fill me in */\n\n    case \"ADD_MESSAGE\":\n      return {\n        userList: previousState.userList[action.payload.userName]\n      };\n\n    default:\n      return previousState;\n  }\n};\n\nconst chatRoomReducer = function (previousState = [], action) {\n  //complete this reducer function\n  switch (action.type) {\n    case \"ADD_MESSAGE\":\n      return {\n        previousState: action.payload\n      };\n\n    default:\n      return previousState;\n  }\n};\n\nconst rootReducer = combineReducers({\n  messages: messagesReducer,\n  //add the rest of the reducers\n  users: usersReducer,\n  chatList: chatRoomReducer\n});\nconst storeInitialState = {\n  messages: {\n    userName: \"\",\n    text: \"\"\n  },\n  users: {\n    userList: []\n  },\n  chatList: []\n};\nconst store = createStore(rootReducer, storeInitialState);\nwindow.__store = store;\n/*\nTo add items to the store in the browser, write the statement below in the brower's console:\nlet store = window.__store\nthen dispatch your action creators in the console as an argument inside dispatch like so:\nstore.dispatch({\n  type: \"ADD_MESSAGE\",\n  payload: { userName: \"Lauren\", text: \"Where should we go out to eat?\" }\n})\n\nNOT like so:\nstore.dispatch(addNewMessageActionCreator({\n    userName: \"Lauren\",\n    text: \"Where should we go out to eat?\"\n  })\n);\n\n*/\n\nconsole.log(\"Current State before dispatching actions with action creator >>>\", store.getState());\n/* In messagesReducer, comment out the \"case\" after the switch statement\nas well as the return statement right below the case.\ncall the dispatch function below.\nBecause we are not handling the action type, note that the previous state is returned.\nNow let's handle that action by uncommenting the case and return statement. Note the new current state. */\n// store.dispatch(\n//   addNewMessageActionCreator({\n//     userName: \"Lauren\",\n//     text: \"Where should we go out to eat?\"\n//   })\n// );\n\nconsole.log(\"Current state after dispatching action with action creator >>>\", store.getState()); // store.dispatch(\n//   addNewMessageActionCreator({\n//     userName: \"Trevor\",\n//     text: \"Anywhere, I'm SO HUNGRY!!\"\n//   })\n// );\n//  store.dispatch(\n//   addUserActionCreator({\n//   userName: \"Jimmy_Cliff\"\n//    })\n//  );\n\nstore.dispatch();\nstore.dispatch();\nconsole.log(\"Current state after dispatching action with action creator >>>\", store.getState());\nexport default store;","map":{"version":3,"sources":["/home/chris/Desktop/projects/hr-atx57-redux-mini-sprint/src/store.js"],"names":["createStore","combineReducers","addNewMessageActionCreator","userName","text","type","payload","addUserActionCreator","defaultAppState","messagesReducer","previousState","action","usersReducer","userList","console","log","chatRoomReducer","rootReducer","messages","users","chatList","storeInitialState","store","window","__store","getState","dispatch"],"mappings":"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","sourcesContent":["import { createStore, combineReducers } from \"redux\";\n\n\nconst addNewMessageActionCreator = ({ userName, text }) => ({\n  type: \"ADD_MESSAGE\",\n  payload: { userName, text }\n});\n\n\nconst addUserActionCreator = ({ userName }) => ({\n  //complete this action creator\n  type: \"ADD_USER\",\n  payload: { userName }\n});\n\nconst defaultAppState = { userName: \"\", text: \"\" };\n\n\nconst messagesReducer = function(previousState = defaultAppState, action) {\n  // console.log(\">>> ACTION OF Type >>> new message \" + action.type);\n  // console.log(\">>> ACTION's PAYLOAD IS >>> new message \", action.payload);\n  switch (action.type) {\n    case \"ADD_MESSAGE\":\n      return {\n        userName: action.payload.userName,\n        text: action.payload.text\n      };\n    default:\n      return previousState;\n  }\n};\n\nconst usersReducer = function(previousState = { userList: [] }, action) {\n  console.log(\">>> ACTION OF Type >>> user \" + action.type);\n  console.log(\">>> ACTION's PAYLOAD IS >>> user \", action.payload);\n  switch (action.type) {\n    case \"ADD_USER\":\n      return {\n        userList: [...previousState.userList, action.payload],\n      };\n      /* fill me in */\n    case \"ADD_MESSAGE\":\n      return {\n        userList: previousState.userList[action.payload.userName]\n      }\n    default:\n      return previousState;\n  }\n};\n\nconst chatRoomReducer = function(previousState = [], action) {\n  //complete this reducer function\n  switch (action.type) {\n    case \"ADD_MESSAGE\":\n      return {\n        previousState: action.payload\n      }\n    default:\n      return previousState;\n  }\n};\nconst rootReducer = combineReducers({\n  messages: messagesReducer,\n  //add the rest of the reducers\n  users: usersReducer,\n  chatList: chatRoomReducer\n});\n\nconst storeInitialState = {\n  messages: { userName: \"\", text: \"\" },\n  users: {\n    userList: []\n  },\n    chatList: []\n}\n\nconst store = createStore(rootReducer, storeInitialState);\nwindow.__store = store;\n\n/*\nTo add items to the store in the browser, write the statement below in the brower's console:\nlet store = window.__store\nthen dispatch your action creators in the console as an argument inside dispatch like so:\nstore.dispatch({\n  type: \"ADD_MESSAGE\",\n  payload: { userName: \"Lauren\", text: \"Where should we go out to eat?\" }\n})\n\nNOT like so:\nstore.dispatch(addNewMessageActionCreator({\n    userName: \"Lauren\",\n    text: \"Where should we go out to eat?\"\n  })\n);\n\n*/\n\nconsole.log(\"Current State before dispatching actions with action creator >>>\", store.getState());\n\n/* In messagesReducer, comment out the \"case\" after the switch statement\nas well as the return statement right below the case.\ncall the dispatch function below.\nBecause we are not handling the action type, note that the previous state is returned.\nNow let's handle that action by uncommenting the case and return statement. Note the new current state. */\n\n// store.dispatch(\n//   addNewMessageActionCreator({\n//     userName: \"Lauren\",\n//     text: \"Where should we go out to eat?\"\n//   })\n// );\n\n  console.log(\"Current state after dispatching action with action creator >>>\", store.getState());\n\n// store.dispatch(\n//   addNewMessageActionCreator({\n//     userName: \"Trevor\",\n//     text: \"Anywhere, I'm SO HUNGRY!!\"\n//   })\n// );\n\n//  store.dispatch(\n//   addUserActionCreator({\n//   userName: \"Jimmy_Cliff\"\n//    })\n//  );\n\n\n\n\n  store.dispatch(/* dispatch more newMessageActionCreators */);\n  store.dispatch(/* dispatch usersActionCreators */);\n\n  console.log(\"Current state after dispatching action with action creator >>>\", store.getState());\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}